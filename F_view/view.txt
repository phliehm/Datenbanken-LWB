### Anleitung ###

Es muss einmal die Datenbank bzw. die Relationen in die "lewein" - Datenbank hinzugefügt werden.
Dies kann entweder durch Ausführen im Terminal erfolgen:
Hierfür muss man sich im Ordner D_sql befinden und hier einen Terminal öffnen.
--> psql
-->\i Install-LWBadventure.sql
--> exit

Alternativ kann auch einfach das Programm "LWBdatenbank" ausgeführt und dort auf "RESET der Datenbank" geklickt werden.
Dadurch wird automatisch die Install-LWEBadventure.sql Datei ausgeführt.


### Motivation ###

Wir wollten gern eine zu unserem Software-Projekt passende Datenbank schreiben. 
Der Aufbau unseres LWB-Adventure Spiels ist an die LehrerInnen-Weiterbildung angelehnt.
Die Struktur ist ähnlich dem Unterricht in der Schule in den verschiedenen Klassen mit
ihren belegten Fächern von bestimmten Lehrkräften. Daher könnte die Software auch leicht an die 
Schulwelt angepasst oder eben selbst von SchülerInnen erarbeitet und teilweise implementiert werden.
Außerdem eignet sich diese Sicht um zu zeigen, dass die meisten Computerspiele in irgendeiner Form
eine Datenbank beinhalten müsse, um alle Gegenstände, Orte, Funktionen etc. speichern und abrufen zu können. 
Unsere Datenbank-Sicht könnte somit auch am Anfang einer Unterrichtsreihe zum Thema Datenbanken den 
SchülerInnen zur Verfügung gestellt werde. Durch Ausprobieren wäre dann relativ schnell klar warum welche 
Dinge gespeichert werden müssen und die SchülerInnen würden sicherlich auch selbst auf fehlende Funktionen
oder Notwendige Verknüpfungen kommen.


### Anwendung ###

Unsere Sicht hat folgende wesentlichen Funktionenen implementiert:

- Übersicht über wichtige Tabellen bzw. Informationen des LWB-Adventures
- Suche (in mehreren verknüpften Tabellen)
- Löschen (von veranstaltungen)
- Neue Einträge hinzufügen (veranstaltungen, dozent_innen, minispiele)
- Limitieren der Ausgabe der Noten/Punkten (min, max) bei den Spielständen
- Anzeigen der Highscores in allen Minigames
- Auflisten der gestellten Aufgaben der SQL-Anfragen
- Abfrage und Darstellung der gestellten Aufgaben der SQL-Anfragen
- Ausführen beliebiger SELECT Anfragen, begrenzt durch die Länge des Eingabefeldes
- Reset der Datenbank (die Install-Datei für die SQL-Datenbank wird ausgeführt).


### Struktur der Software und erwähnenswerte Pakete ###

- Verbindung zur Datenbank über die Klasse "SQL" (Herr Schäfer und Herr Herker?) (Installation des PostgreSQL-Go-Treibers nach Anleitung von Hr. Herker)
- Eingabe von Daten mithilfe der Klasse "felder" (Herr Schäfer)
- Speichern von SELECT - Anfragen mithilfe der Klasse "sqlTabelle" (Cyriacus, Liehm, Schneider, Seiß)
- Anzeigen der SQL Tabellen mit der Klasse "textboxTabelle" (Cyriacus, Liehm, Schneider, Seiß) in einem gfx-Fenster
- Die Klasse "textboxen" (Cyriacus, Liehm, Schneider, Seiß) basiert auf dem gfx-Paket und ermöglicht das unkomplizierte Positionieren
   von Texten und ermöglicht autoamtische oder manuelle Zeilenumbrüche.
- Das Umschalten zwischen Seiten und Auswählen von Feldern erfolgt über die Klasse "buttons" (Cyriacus, Liehm, Schneider, Seiß)
- Grafik: Unsere Software nutzt zur grafischen Darstellung das gfx-Paket (Herr Schmidt). Es ist nicht notwendig ein ständigs Fenster-Update durchzuführen, 
da sich nur bei Klicks oder neuen Einträgen etwas ändert. Daher wird einfach bei neuen Ereignissen die Funktion ZeichneRaum() aufgerufen.
- In der main() Funktion wir eine Go-Routine maussteuerung() aufgerufen. Diese prüft, ob der linke Mausbutton gedrückt wurde und prüft entsprechend
welche Aktion als nächstes auszuführen ist (Raumwechsel, Feldeintrag, Anfrage senden etc.).


### Begründung der Einschränkungen ###

Prinzipiell wäre es wünschenswert, nahezu alle Relationen in unserer Software ändern zu können. 
Wir haben die Klassen "felder" für die Eingabe von Werten und "SQL" zum Verbindungsaufbau und
senden von Anfragen verwendet. Ein Problem beim Schreiben unserer Anwendung war, dass die Klasse SQL
bei ungültigen Anfragen bzw. Senden von INSERT, DELETE, UPDATE Befehlen einen log.Fatal Fehler aufruft und somit
direkt die Anwendung beendet, ohne die Möglichkeit zu haben den Fehler abzufangen. 

Daher haben wir zwar offensichtliche Fehler in unserer Software abgefangen - z.B. kein gültiger Relationenname oder kein Schlüsselwort
wie SELECT etc., Einschränkung bei der Eingabe in die Felder - es kann aber trotzdem zu Fehlern kommen. 
Daher haben wir den Funktionsumfang beschränkt, um die Nutzbarkeit nicht zu beeinträchtigen. 

Weiterhin sollten hauptsächlich typische Anwendungsfälle gezeigt werden, daher haben wir auf das wiederholte Implementieren
der gleichen Anfragen aber für andere Tabellen verzichtet. Der Programmieraufwand hätte sich hierdurch erheblich erhöht und 
nur einen geringen Mehrwert gebracht.

- Es können keine beliebgien neuen Datensätze eingetragen werden, sondern nur für bestimmte Tabellen (veranstaltungen, dozent_innen, minispiele).
- Es können nur Veranstaltungen gelöscht werden und nicht z.B. DozentInnen, Minispiele etc. Schon hier war es sehr aufwendig, alle Verknüpfungen mit anderen Relationen zu beachten und 
   entsprechend die zu löschende Veranstaltung auch aus anderen Relationen (z.B. unterricht) zu löschen. Entsprechen müsste man auch für das Löschen
   anderer Tabellen eine Vielzahl an Verknüpfungen beachten. 
   Man hätte zwar bei den Constraints in PostgreSQL auch ON DELETE CASCADE setzen können, hier wäre aber vielleicht ein 
   unbeabsichtigter Datenverlust die Folge (z. B.: Löschen einer Veranstaltung löscht das verknüpfte Minispiel). Daher haben wir uns gegen eine Kaskadierung entschieden. 

- Man hätte in der Ansicht der Veranstaltungen noch weitere Spalten hinzufügen können, allerdings sind wir hier durch die Breite des Fensters bzw. 
   des Bildschirms limitiert. Die von uns erstellte Klasse textboxTabelle stellt zwar schon die Spaltenbreite optimal ein, trotzdem reicht die Fensterbreite
   wegen der langen Inhalte z.B. beim Veranstaltungsnamen nicht immer aus. 
   Hier wäre es praktisch noch ein Auswahl der angezeigen Spalten treffen zu können. 

- Man hätte in der Ansicht der Spielstände nur so viele Zeilen anzeigen lassen können, wie hoch in das Fenster passen. Die Ausgabe hätte so getrennt werden
   müssen, sodass ein Button die weiteren Zeilen anzeigt. Die Abfrage verdeckter Zeilen kann aber über eine Sucheinschränkung geschehen.

- Es können keine Assistenzen hinzugefügt oder gelöscht werden (was aber programmiertechnisch gut umsetzbar wäre, hier aber keine weitere Funktionalität zeigt).




### Mögliche Erweiterungen des Views ###

- Das Sortieren von Tabellen durch Klick auf die Spaltennamen könnte auf- oder absteigend erfolgen.
- Bestimmte Attribute könnten vor dem Anzeigen zu- oder abgewählt werden.
- Einträge in Verknüpfungen wie "unterricht" und "assistenzen" können außerdem hinzugefügt oder gelöscht werden.
- ?????




